{"version":3,"sources":["Containers/MyPokemon.js"],"names":["PokemonCard","loadable","MyPokemon","myPokemonCallback","useState","pokemonList","setPokemonList","openReleased","setOpenReleased","releasedMessage","setReleasedMessage","severity","setSeverity","openDialog","setOpenDialog","pokemonIndex","setPokemonIndex","useEffect","JSON","parse","window","localStorage","getItem","flexPokemonList","css","detailsPokemon","pokemonName","callback","releasePokemon","pokemon","index","length","map","detailsFunction","releaseFunction","nickname","open","onClose","autoHideDuration","props","elevation","variant","aria-labelledby","id","onClick","newPokemonList","slice","splice","setItem","stringify","confirmRelease","color"],"mappings":"+OAcMA,EAAcC,aAAS,kBAAM,iCAgGpBC,UA9FG,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,EAEHC,mBAAS,MAFN,mBAElCC,EAFkC,KAErBC,EAFqB,OAGDF,oBAAS,GAHR,mBAGlCG,EAHkC,KAGpBC,EAHoB,OAIKJ,mBAAS,MAJd,mBAIlCK,EAJkC,KAIjBC,EAJiB,OAKTN,mBAAS,MALA,mBAKlCO,EALkC,KAKxBC,EALwB,OAMLR,oBAAS,GANJ,mBAMlCS,EANkC,KAMtBC,EANsB,OAODV,oBAAU,GAPT,mBAOlCW,EAPkC,KAOpBC,EAPoB,KASzCC,qBAAU,WACNX,EAAeY,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,kBACvD,IAEH,IAIMC,EAAkBC,YAAH,yNAafC,EAAiB,SAACC,IAjBP,SAACA,GACdvB,EAAkB,iBAAkBuB,GAiBpCC,CAASD,IAgBPE,EAAiB,SAAEC,EAASC,GAC9Bd,EAAgBc,GAChBhB,GAAc,IAGlB,OACI,6BACI,0CAEqB,OAAhBT,GAAgD,KAAb,OAAXA,QAAW,IAAXA,OAAA,EAAAA,EAAa0B,QAClC,4EAEJ,mBAAKP,IAAKD,EAAV,gBACKlB,QADL,IACKA,OADL,EACKA,EAAa2B,KAAI,SAACH,EAASC,GAAV,OACd,YAAC9B,EAAD,CAAoC6B,QAASA,EAASI,gBAAiBR,EAAgBS,gBAAiBN,EAAgBE,MAAOA,GAA7GD,EAAQM,eAItC,YAAC,IAAD,CACIC,KAAM7B,EACN8B,QAAS,kBAAM7B,GAAgB,IAC/B8B,iBAAkB,IAHtB,SAKI,aA5CE,SAACC,GACX,OAAO,YAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,MA2C5C,CAAOF,QAAS,kBAAM7B,GAAgB,IAAQG,SAAUA,EAAxD,SACKF,MAGT,YAAC,IAAD,CAAQ2B,KAAMvB,EAAYwB,QAAS,WAAQvB,GAAc,IAAU4B,kBAAgB,oBAAnF,UACI,YAAC,IAAD,CAAaC,GAAG,oBAAhB,6BACA,YAAC,IAAD,UACI,YAAC,IAAD,+DAIJ,YAAC,IAAD,WACI,YAAC,IAAD,CAAQC,QAAS,YAhDV,WACnB,IAAIC,EAAiBxC,EAAYyC,QACjCD,EAAeE,OAAOhC,EAAc,GAEpCK,OAAOC,aAAa2B,QAAQ,aAAc9B,KAAK+B,UAAUJ,IACzDvC,EAAeuC,GAEf/B,GAAc,GACdJ,EAAmB,kCACnBE,EAAY,WACZJ,GAAgB,GAsCqB0C,IAAqBC,MAAM,YAApD,iBAGA,YAAC,IAAD,CAAQP,QAAS,WAAQ5B,GAAiB,GAAIF,GAAc,IAAWqC,MAAM,UAA7E","file":"static/js/7.28e3c6a3.chunk.js","sourcesContent":["/** @jsxImportSource @emotion/react */\r\nimport { css } from '@emotion/react'\r\nimport { useEffect, useState } from 'react';\r\nimport loadable from '@loadable/component';\r\nimport Button from '@material-ui/core/Button';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n// Code Splitting with Loadable Component\r\nconst PokemonCard = loadable(() => import('../Components/PokemonCard'));\r\n\r\nconst MyPokemon = ({ myPokemonCallback }) => {\r\n\r\n    const [pokemonList, setPokemonList] = useState(null);\r\n    const [openReleased, setOpenReleased] = useState(false);\r\n    const [releasedMessage, setReleasedMessage] = useState(null);\r\n    const [severity, setSeverity] = useState(null);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [pokemonIndex, setPokemonIndex] = useState(-1);\r\n\r\n    useEffect(() => {\r\n        setPokemonList(JSON.parse(window.localStorage.getItem(\"my_pokemon\")));\r\n    }, []);\r\n\r\n    const callback = (pokemonName) => {\r\n        myPokemonCallback(\"pokemonDetails\", pokemonName);\r\n    }\r\n\r\n    const flexPokemonList = css`\r\n        display: flex;\r\n        flex-direction: row;\r\n        align-items: center;\r\n        justify-content: space-evenly;\r\n        flex-wrap: wrap;\r\n        margin: 0px 0px 20px 0px;\r\n    `\r\n\r\n    const Alert = (props) => {\r\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n    }\r\n\r\n    const detailsPokemon = (pokemonName) => {\r\n        callback(pokemonName);\r\n    }\r\n\r\n    const confirmRelease = () => {\r\n        var newPokemonList = pokemonList.slice();\r\n        newPokemonList.splice(pokemonIndex, 1);\r\n\r\n        window.localStorage.setItem(\"my_pokemon\", JSON.stringify(newPokemonList));\r\n        setPokemonList(newPokemonList);\r\n\r\n        setOpenDialog(false);\r\n        setReleasedMessage(\"Pokemon successfully released!\");\r\n        setSeverity(\"success\");\r\n        setOpenReleased(true);\r\n    }\r\n\r\n    const releasePokemon = ( pokemon, index ) => {\r\n        setPokemonIndex(index);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>My Pokemon</h1>\r\n            {\r\n                (pokemonList === null || pokemonList?.length === 0) ?\r\n                    <div>No Pokemon have been caught. Go catch some!</div>\r\n                :\r\n                <div css={flexPokemonList}>\r\n                    {pokemonList?.map((pokemon, index) => (\r\n                        <PokemonCard key={pokemon.nickname} pokemon={pokemon} detailsFunction={detailsPokemon} releaseFunction={releasePokemon} index={index} />\r\n                    ))}\r\n                </div>\r\n            }\r\n            <Snackbar\r\n                open={openReleased}\r\n                onClose={() => setOpenReleased(false)}\r\n                autoHideDuration={4000}\r\n            >\r\n                <Alert onClose={() => setOpenReleased(false)} severity={severity}>\r\n                    {releasedMessage}\r\n                </Alert>\r\n            </Snackbar>\r\n            <Dialog open={openDialog} onClose={() => { setOpenDialog(false) }} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Release Pokemon</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Are you sure you want to release this pokemon?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { confirmRelease(); }} color=\"secondary\">\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={() => { setPokemonIndex(-1); setOpenDialog(false); }} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MyPokemon;\r\n"],"sourceRoot":""}